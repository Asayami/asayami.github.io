import idaapi


def check_for_meow():
    register_names = [
        "eax",
        "ebx",
        "ecx",
        "edx",
        "esi",
        "edi",
        "ebp",
        "esp",
        "rax",
        "rbx",
        "rcx",
        "rdx",
        "rsi",
        "rdi",
        "rbp",
        "rsp",
        "rip",
        "rflags",
    ]

    for reg_name in register_names:
        try:
            reg_value = idaapi.get_reg_val(reg_name)
            if reg_value:
                if isinstance(reg_value, str):
                    print(f"register {reg_name}: {reg_value}")
                reg_str = str(reg_value)
                if "meow" in reg_str.lower():
                    print(f"Found 'meow' in register {reg_name}: {reg_str}")
                    return True

                if isinstance(reg_value, (int, float)):
                    if reg_value != 0:
                        data = idaapi.get_bytes(reg_value, 100)
                        if data:
                            reg_str = data.decode(errors="ignore").strip("\x00")
                            if len(reg_str) > 5:
                                print(f"register {reg_name}: {reg_str}")
                            if "meow" in reg_str.lower():
                                print(
                                    f"Found 'meow' in register {reg_name} (address {reg_value:x}): {reg_str}"
                                )
                                return True
        except Exception as e:
            pass

    return False


def main():
    idaapi.msg_clear()
    idaapi.load_debugger("windbg", 0)

    state = idaapi.get_process_state()
    match state:
        case idaapi.DSTATE_NOTASK:
            ea = idaapi.inf_get_main()
            if ea == idaapi.BADADDR:
                ea = idaapi.inf_get_start_ea()

            idaapi.run_to(ea)
            code = idaapi.wait_for_next_event(idaapi.WFNE_SUSP, -1)
            if code <= 0:
                idaapi.warning("Failed to run the process")
                return
        case idaapi.DSTATE_SUSP:
            print("Process is already suspended")
        case idaapi.DSTATE_RUN:
            print("Process is running")
            idaapi.suspend_process()
            code = idaapi.wait_for_next_event(idaapi.WFNE_SUSP, -1)

    while True:
        idaapi.step_into()
        code = idaapi.wait_for_next_event(idaapi.WFNE_SUSP | idaapi.WFNE_CONT, -1)
        if code <= 0:
            return (False, "Failed to step into")

        ev = idaapi.get_debug_event()
        if ev.eid() == idaapi.STEP:
            if check_for_meow():
                print("meow found in a register!")
                break
        else:
            pass

    return True


if __name__ == "__main__":
    old_opt = idaapi.set_debugger_options(
        idaapi.DOPT_TEMP_HWBPT | idaapi.DOPT_FAST_STEP
    )
    main()

    idaapi.set_debugger_options(old_opt)
